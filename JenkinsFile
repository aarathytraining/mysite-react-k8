pipeline{
    agent any
    environment{
        imagename = "aarathytraining/mysite-react:${BUILD_NUMBER}"
        container_name = "mysite-react-cont-dev"
    }
    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/main']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'jenkins-user-github', url: 'https://github.com/aarathytraining/mysite-react-k8.git']]])
                sh 'echo build number is ${BUILD_NUMBER} && echo $imagename && echo $container_name' 
                sh "ls -lart ./*"
                sh "sed -i 's|IMAGE_NAME|${imagename}|g' deploymentsvc.yaml && cat deploymentsvc.yaml && scp -o StrictHostKeyChecking=no -r -i /home/ubuntu/jenkins02.pem deploymentsvc.yaml ubuntu@ec2-54-210-127-67.compute-1.amazonaws.com:/home/ubuntu"
            }
        }
        stage('Build'){
            steps{
                sh 'npm install'
                sh 'npm run build'
            }
        }
        stage('Test'){
            steps{
                sh 'npm test -- --watchAll=false'
            }
        }
        stage('Build Image'){
            steps{
                sh 'echo '
                sh 'docker build -t ${imagename} .'
            }
        }
        stage('Push Image'){
            steps{
                withCredentials([usernamePassword(credentialsId: 'dockerHub', passwordVariable: 'dockerHubPassword', usernameVariable: 'dockerHubUser')]) 
                {
                sh "docker login -u ${env.dockerHubUser} -p ${env.dockerHubPassword}"
                sh 'docker push ${imagename} '
                }
            }
        }
        stage('Scan Code ') {
            steps{
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE')
                {
                snykSecurity failOnError: false, organisation: 'aarathy.training', projectName: 'mysite-react', severity: 'medium',snykInstallation: 'snyk1', snykTokenId: 'mysnyk', targetFile: 'package.json'
                
                }
            }
        }
        stage('Deploy app to K8'){
            steps{
                sh "ssh -o StrictHostKeyChecking=no -i /home/ubuntu/jenkins02.pem ubuntu@ec2-54-210-127-67.compute-1.amazonaws.com 'cd /home/ubuntu && sudo kubectl apply -f deploymentsvc.yaml'"
            }
        }
        stage('End of job'){
            steps{
                sh 'echo "end of pipeline"'
            }
        }
    }
}